#ifndef TIMER_H
#define TIMER_H
#include <chrono>
#include <string>

class Timer {
private:
	// Псевдонимы типов используются для удобного доступа к вложенным типам
	using clock_t = std::chrono::high_resolution_clock;
	using second_t = std::chrono::duration<double, std::ratio<1> >;

	std::chrono::time_point<clock_t> m_beg;

public:
	Timer() : m_beg(clock_t::now()) {}

	void reset() {
		m_beg = clock_t::now();
	}

	double elapsed() const {
		return std::chrono::duration_cast<second_t>(clock_t::now() - m_beg).count();
	}
};

int getRandomNumber(int min, int max){
	static const double fraction = 1.0 / (static_cast<double>(RAND_MAX) + 1.0);
	return static_cast<int>(rand() * fraction * (max - min + 1) + min);
}

template <typename T>
std::string toString(T val){
	std::ostringstream oss;
	oss << val;
	return oss.str();
}

template<typename T>
T fromString(const std::string& s){
	std::istringstream iss(s);
	T res;
	iss >> res;
	return res;
}

/*
cout << "Введите последовательность: ";
vector<double>  v{};
double n{};
while (cin >> n) {
	v.push_back(n);
	char c = cin.get();
	if (c == '\n')
		break;
}


	string num{};
	for (int i{}; i < 1000000; ++i) {
		if (i / 100000 > 0)
			num = toString(i);
		else if (i / 10000 > 0)
			num = "0" + toString(i);
		else if (i / 1000 > 0)
			num = "00" + toString(i);
		else if (i / 100 > 0)
			num = "000" + toString(i);
		else if (i / 10 > 0)
			num = "0000" + toString(i);
		else if (i / 1 >= 0)
			num = "00000" + toString(i);
		cout << num<< " ";
	}
*/

template <typename T>
T Proverka(T& x){
	if (std::cin.fail()){
		std::cin.clear();
		std::cin.ignore(32767, '\n');
		std::cout << "Вы ввели недопустимое значение.Повторите ввод." << std::endl;

		std::cin >> x;
		return Proverka(x);
	}
	else{
		std::cin.ignore(32767, '\n');
		return x;
	}
}

#endif
